apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: clone-build-push-pipeline
  namespace: lmwprac
spec:
  description: |
    This pipeline clones a git repo, builds a Docker image with Kaniko and
    pushes it to a registry   
  params:
    - name: github-clone-url
      type: string
      description: "The URL of the Git repository"
    - name: SONAR_HOST_URL
      type: string
      description: "SonarQube server URL"
    - name: PROJECT_KEY
      type: string
      description: "Project key in SonarQube"
    - name: IMAGE
      type: string
      description: "The container registry where the image will be pushed"
    - name: DOCKERFILE
      type: string
      description: "Path to the Dockerfile to build. Defaults to ./Dockerfile"
    - name: CONTEXT
      type: string
      description: "The build context used by Kaniko. Defaults to /workspace/source"
    - name: TRIVY_SEVERITY
      type: string
      description: "Comma-separated list of severities to scan for. Defaults to CRITICAL,HIGH"
    - name: GO_TEST_DIR
      type: string
      description: "Directory containing the Go test files"
    - name: HELM_MANIFEST_PATH
      type: string
      description: "Path to the Helm manifest file"
    - name: YAML_PATH_TO_IMAGE
      type: string
      description: "Path to the image field in the manifest"
    - name: ACTION
      type: string
      description: "kubectl action (apply/delete)"
    - name: RELEASE_NAME
      type: string
      description: "The name of the Helm release"
    - name: CHART_DIR
      type: string
      description: "Directory containing the Helm chart"
    - name: NAMESPACE
      type: string
      description: "Kubernetes namespace for the release"
  workspaces:
    - name: git-credentials
    - name: source
    - name: docker-config
  tasks:
    - name: git-clone
      taskRef:
        name: git-clone
        kind: Task
      params:
        - name: github-clone-url
          value: $(params.github-clone-url)
      workspaces:
        - name: git-credentials
          workspace: git-credentials
        - name: source
          workspace: source

    - name: sonarqube-scan
      runAfter: ["git-clone"]
      taskRef:
        name: sonarqube-scan
        kind: Task
      params:
        - name: SONAR_HOST_URL
          value: $(params.SONAR_HOST_URL)
        - name: PROJECT_KEY
          value: $(params.PROJECT_KEY)
      workspaces:
        - name: source
          workspace: source

    - name: docker-build
      runAfter: ["sonarqube-scan"]
      taskRef:
        name: docker-build
        kind: Task
      workspaces:
      - name: source
        workspace: source
      - name: docker-config
        workspace: docker-config
      params:
      - name: IMAGE
        value: $(params.IMAGE)
      - name: DOCKERFILE
        value: $(params.DOCKERFILE)
      - name: CONTEXT
        value: $(params.CONTEXT)

    - name: trivy-scan
      runAfter: ["docker-build"]
      taskRef:
        name: trivy-scan
        kind: Task
      params:
      - name: TRIVY_SEVERITY
        value: $(params.TRIVY_SEVERITY)
      - name: IMAGE
        value: $(params.IMAGE)

    - name: go-test
      runAfter: ["docker-build"]
      taskRef:
        name: go-test
        kind: Task
      params:
        - name: GO_TEST_DIR
          value: $(params.GO_TEST_DIR)
      workspaces:
        - name: source
          workspace: source
      
    - name: deploy
      runAfter: 
        - trivy-scan
        - go-test
      taskRef:
        name: kubectl-deploy
        kind: Task
      params:
        - name: HELM_MANIFEST_PATH
          value: $(params.HELM_MANIFEST_PATH)
        - name: YAML_PATH_TO_IMAGE
          value: $(params.YAML_PATH_TO_IMAGE)
        - name: IMAGE
          value: $(params.IMAGE)
        - name: ACTION
          value: $(params.ACTION)
      workspaces:
        - name: source
          workspace: source 

    - name: helm-deploy
      runAfter: ["deploy"]
      taskRef:
        name: helm-deploy
        kind: Task
      params:
        - name: RELEASE_NAME
          value: $(params.RELEASE_NAME)
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
      workspaces:
        - name: source
          workspace: source